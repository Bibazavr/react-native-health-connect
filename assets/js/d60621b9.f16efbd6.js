"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[963],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,f=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},605:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:5,title:"readRecords"},i="readRecords",c={unversionedId:"api/methods/readRecords",id:"api/methods/readRecords",title:"readRecords",description:"Retrieves a collection of records.",source:"@site/docs/api/methods/readRecords.md",sourceDirName:"api/methods",slug:"/api/methods/readRecords",permalink:"/react-native-health-connect/docs/api/methods/readRecords",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/readRecords.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"readRecords"},sidebar:"tutorialSidebar",previous:{title:"insertRecords",permalink:"/react-native-health-connect/docs/api/methods/insertRecords"},next:{title:"aggregateRecord",permalink:"/react-native-health-connect/docs/api/methods/aggregateRecord"}},d={},s=[],l={toc:s};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"readrecords"},(0,o.kt)("inlineCode",{parentName:"h1"},"readRecords")),(0,o.kt)("p",null,"Retrieves a collection of records."),(0,o.kt)("h1",{id:"method"},"Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"readRecords<T extends RecordType>(\n    // record type e.g activeCaloriesBurned\n    recordType: T,\n\n    // read options such as time range filter, data origin filter, ordering and pagination\n    options: ReadRecordsOptions\n): Promise<RecordResult<T>[]>\n")),(0,o.kt)("h1",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { readRecords } from \'react-native-health-connect\';\n\nconst readSampleData = () => {\n  readRecords(\'ActiveCaloriesBurned\', {\n    timeRangeFilter: {\n      operator: \'between\',\n      startTime: \'2023-01-09T12:00:00.405Z\',\n      endTime: \'2023-01-09T23:53:15.405Z\',\n    },\n  }).then((result) => {\n    console.log(\'Retrieved records: \', JSON.stringify({ result }, null, 2)); // Retrieved records:  {"result":[{"startTime":"2023-01-09T12:00:00.405Z","endTime":"2023-01-09T23:53:15.405Z","energy":{"inCalories":15000000,"inJoules":62760000.00989097,"inKilojoules":62760.00000989097,"inKilocalories":15000},"metadata":{"id":"239a8cfd-990d-42fc-bffc-c494b829e8e1","lastModifiedTime":"2023-01-17T21:06:23.335Z","clientRecordId":null,"dataOrigin":"com.healthconnectexample","clientRecordVersion":0,"device":0}}]}\n  });\n};\n')))}p.isMDXComponent=!0}}]);