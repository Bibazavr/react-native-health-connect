"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[832],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var g=n.createContext({}),d=function(e){var t=n.useContext(g),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(g.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,g=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=d(r),u=a,m=s["".concat(g,".").concat(u)]||s[u]||p[u]||o;return r?n.createElement(m,i(i({ref:t},l),{},{components:r})):n.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var g in t)hasOwnProperty.call(t,g)&&(c[g]=t[g]);c.originalType=e,c[s]="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4942:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:6,title:"aggregateRecord"},i="aggregateRecord",c={unversionedId:"api/aggregateRecord",id:"api/aggregateRecord",title:"aggregateRecord",description:"Reads aggregated result according to requested read criteria, for e.g, data origin filter and within a time range. Some record types do not support aggregation.",source:"@site/docs/api/aggregateRecord.md",sourceDirName:"api",slug:"/api/aggregateRecord",permalink:"/react-native-health-connect/docs/api/aggregateRecord",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/aggregateRecord.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"aggregateRecord"},sidebar:"tutorialSidebar",previous:{title:"readRecords",permalink:"/react-native-health-connect/docs/api/readRecords"},next:{title:"deleteRecordsByUuids",permalink:"/react-native-health-connect/docs/api/deleteRecordsByUuids"}},g={},d=[],l={toc:d};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"aggregaterecord"},(0,a.kt)("inlineCode",{parentName:"h1"},"aggregateRecord")),(0,a.kt)("p",null,"Reads aggregated result according to requested read criteria, for e.g, data origin filter and within a time range. Some record types do not support aggregation."),(0,a.kt)("h1",{id:"method"},"Method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"aggregateRecord<T extends AggregateResultRecordType>(\n    request: AggregateRequest<T>\n): Promise<AggregateResult<T>>\n")),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { aggregateRecord } from 'react-native-health-connect';\n\nconst aggreagetSampleData = () => {\n  aggregateRecord({\n    recordType: 'ActiveCaloriesBurned',\n    timeRangeFilter: {\n      operator: 'between',\n      startTime: '2023-01-09T12:00:00.405Z',\n      endTime: '2023-01-09T23:53:15.405Z',\n    },\n  }).then((result) => {\n    console.log('Aggregated record: ', { result });\n  });\n};\n")))}s.isMDXComponent=!0}}]);