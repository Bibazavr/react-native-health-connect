"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[440],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},l=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?n.createElement(f,c(c({ref:r},l),{},{components:t})):n.createElement(f,c({ref:r},l))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var d=2;d<a;d++)c[d]=t[d];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3593:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=t(7462),o=(t(7294),t(3905));const a={sidebar_position:5,title:"readRecords"},c="readRecords",i={unversionedId:"api/readRecords",id:"api/readRecords",title:"readRecords",description:"Retrieves a collection of records.",source:"@site/docs/api/readRecords.md",sourceDirName:"api",slug:"/api/readRecords",permalink:"/react-native-health-connect/docs/api/readRecords",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/readRecords.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"readRecords"},sidebar:"tutorialSidebar",previous:{title:"insertRecords",permalink:"/react-native-health-connect/docs/api/insertRecords"},next:{title:"aggregateRecord",permalink:"/react-native-health-connect/docs/api/aggregateRecord"}},s={},d=[],l={toc:d};function p(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"readrecords"},(0,o.kt)("inlineCode",{parentName:"h1"},"readRecords")),(0,o.kt)("p",null,"Retrieves a collection of records."),(0,o.kt)("h1",{id:"method"},"Method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"readRecords<T extends RecordType>(\n    // record type e.g activeCaloriesBurned \n    recordType: T,\n\n    // read options such as time range filter, data origin filter, ordering and pagination\n    options: ReadRecordsOptions\n): Promise<RecordResult<T>[]>\n")),(0,o.kt)("h1",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { readRecords } from 'react-native-health-connect';\n\nconst readSampleData = () => {\n  readRecords('activeCaloriesBurned', {\n    timeRangeFilter: {\n      operator: 'between',\n      startTime: '2023-01-09T12:00:00.405Z',\n      endTime: '2023-01-09T23:53:15.405Z',\n    },\n  }).then((result) => {\n    console.log('Retrieved records: ', JSON.stringify({ result }, null, 2));\n  });\n};\n")))}p.isMDXComponent=!0}}]);