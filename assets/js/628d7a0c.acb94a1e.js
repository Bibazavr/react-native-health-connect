"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[882],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?i.createElement(h,o(o({ref:t},s),{},{components:n})):i.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3801:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={title:"initialize"},o="initialize",c={unversionedId:"api/methods/initialize",id:"api/methods/initialize",title:"initialize",description:"Initializes the health connect client with specific providers. If providerPackageName is not provided, the default Health Connect application package name will be considered com.google.android.apps.healthdata.",source:"@site/docs/api/methods/00-initialize.md",sourceDirName:"api/methods",slug:"/api/methods/initialize",permalink:"/react-native-health-connect/docs/api/methods/initialize",draft:!1,editUrl:"https://github.com/matinzd/react-native-health-connect/tree/main/docs/docs/api/methods/00-initialize.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"initialize"},sidebar:"tutorialSidebar",previous:{title:"Methods",permalink:"/react-native-health-connect/docs/category/methods"},next:{title:"getSdkStatus",permalink:"/react-native-health-connect/docs/api/methods/getSdkStatus"}},l={},p=[],s={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"initialize"},(0,r.kt)("inlineCode",{parentName:"h1"},"initialize")),(0,r.kt)("p",null,"Initializes the health connect client with specific providers. If ",(0,r.kt)("inlineCode",{parentName:"p"},"providerPackageName")," is not provided, the default Health Connect application package name will be considered ",(0,r.kt)("inlineCode",{parentName:"p"},"com.google.android.apps.healthdata"),"."),(0,r.kt)("h1",{id:"method"},"Method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"initialize(providerPackageName: string): Promise<boolean>;\n")),(0,r.kt)("h1",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { initialize } from 'react-native-health-connect';\n\nconst initializeHealthConnect = async () => {\n  const isInitialized = await initialize();\n  console.log({ isInitialized });\n};\n")))}d.isMDXComponent=!0}}]);